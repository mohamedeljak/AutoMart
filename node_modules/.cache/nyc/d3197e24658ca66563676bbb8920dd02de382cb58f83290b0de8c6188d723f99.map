{"version":3,"sources":["authenticationMiddleware.js"],"names":["key","require","app","use","express","json","module","exports","req","res","next","token","headers","jwt","verify","tokenkey","err","decoded","console","log","status","message","data","send"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AACA;AAGA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAMC,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR,E,CAIA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAGjC;AACA,MAAIC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,cAAZ,CAAZ,CAJiC,CAMjC;;AACA,MAAID,KAAJ,EAAW;AACV;AACC;AACAE,6BAAIC,MAAJ,CAAWH,KAAX,EAAkBX,GAAG,CAACe,QAAtB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAiB;AAClD;AACE,UAAID,GAAJ,EAAS;AACRE,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACC,eAAOF,GAAG,CAACJ,IAAJ,CAAS;AACfe,UAAAA,MAAM,EAAE,GADO;AAEnBC,UAAAA,OAAO,EAAE,eAFU;AAGnBC,UAAAA,IAAI,EAAE;AAEFD,YAAAA,OAAO,EAAE;AAFP;AAHa,SAAT,CAAP;AAMD,OARD,MAQO;AACL;AACAb,QAAAA,GAAG,CAACS,OAAJ,GAAcA,OAAd;AACAP,QAAAA,IAAI;AACL;AACF,KAfD;AAiBD,GApBD,MAoBO;AAEL;AAEAD,IAAAA,GAAG,CAACc,IAAJ,CAAS;AACRH,MAAAA,MAAM,EAAE,GADA;AAERC,MAAAA,OAAO,EAAE,oBAFD;AAGRC,MAAAA,IAAI,EAAE;AAEHD,QAAAA,OAAO,EAAE;AAFN;AAHE,KAAT;AAQD;AACF,CAxCH","sourceRoot":"/home/mhashim/Desktop/NewWork/AutoMart/src/middlewares","sourcesContent":["import express from 'express';\nimport Reflection from '../controllers/Reflection';\nimport user from '../controllers/user';\nimport jwt from 'jsonwebtoken';\n//import tokenkey from './key';\n\n\nconst key = require('./key');\n\nconst app = express()\napp.use(express.json())\n\n\n\n//app.use('/api/v1/car', ProtectedRoutes);\nmodule.exports = (req, res, next) => {\n\n\n    // check header for the token\n    var token = req.headers['access-token'];\n\n    // decode token\n    if (token) {\n     //console.log(key.tokenkey)\n      // verifies secret and checks if the token is expired\n      jwt.verify(token, key.tokenkey , (err, decoded) =>{  \n      //console.log('-----------------------',err)\n        if (err) {\n        \tconsole.log(token);\n          return res.json({ \n           status :400,\n      \tmessage :\"invalid token\",\n      \tdata: {  \n\n          \tmessage: 'invalid token' } });    \n        } else {\n          // if everything is good, save to request for use in other routes\n          req.decoded = decoded;    \n          next();\n        }\n      });\n\n    } else {\n\n      // if there is no token  \n\n      res.send({ \n      \tstatus :401,\n      \tmessage :\"token not provided\",\n      \tdata: {  \n\n          message: 'No token provided.'} \n      });\n\n    }\n  };\n "]}