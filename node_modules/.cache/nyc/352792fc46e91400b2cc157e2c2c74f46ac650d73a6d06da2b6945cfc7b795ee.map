{"version":3,"sources":["SignupVali.js"],"names":["Joi","require","key","app","use","express","json","module","exports","req","res","next","data","body","schema","object","keys","email","string","required","first_name","alphanum","last_name","address","is_admin","password","validate","err","value","console","log","status","message"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AACA;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAGA,IAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAME,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR,E,CAIA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrC,MAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AACA,MAAMC,MAAM,GAAGd,GAAG,CAACe,MAAJ,GAAaC,IAAb,CAAkB;AAE7BC,IAAAA,KAAK,EAACjB,GAAG,CAACkB,MAAJ,GAAaD,KAAb,GAAqBE,QAArB,EAFuB;AAG7BC,IAAAA,UAAU,EAACpB,GAAG,CAACkB,MAAJ,GAAaG,QAAb,GAAwBF,QAAxB,EAHkB;AAI7BG,IAAAA,SAAS,EAAEtB,GAAG,CAACkB,MAAJ,GAAaG,QAAb,GAAwBF,QAAxB,EAJkB;AAK7BI,IAAAA,OAAO,EAAEvB,GAAG,CAACkB,MAAJ,GAAaG,QAAb,GAAwBF,QAAxB,EALoB;AAM7BK,IAAAA,QAAQ,EAAGxB,GAAG,WAAH,cAAsB,KAAtB,CANkB;AAO5ByB,IAAAA,QAAQ,EAAGzB,GAAG,CAACkB,MAAJ,GAAaG,QAAb,GAAwBF,QAAxB;AAPiB,GAAlB,CAAf;AAUGnB,EAAAA,GAAG,CAAC0B,QAAJ,CAAad,IAAb,EAAmBE,MAAnB,EAA2B,UAACa,GAAD,EAAMC,KAAN,EAAgB;AAC7C,QAAID,GAAJ,EAAS;AACGE,MAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAM,CAACG,KAAnB,EADH,CAEE;;AACAP,MAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB;AACjByB,QAAAA,MAAM,EAAE,OADS;AAEjBC,QAAAA,OAAO,EAAE;AAFQ,OAArB;AAMC,KATZ,MAUgB;AACDH,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAEPnB,MAAAA,IAAI;AAGA;AACZ,GAlBE;AAoBA,CAhCH","sourceRoot":"/home/mhashim/Desktop/NewWork/AutoMart/src/middlewares","sourcesContent":["import express from 'express';\nimport Reflection from '../controllers/Reflection';\nimport user from '../controllers/user';\nimport jwt from 'jsonwebtoken';\n//import tokenkey from './key';\nconst Joi = require('joi');\n\n\nconst key = require('./key');\n\nconst app = express()\napp.use(express.json())\n\n\n\n//app.use('/api/v1/car', ProtectedRoutes);\nmodule.exports = (req, res, next) => {\nconst data = req.body;\nconst schema = Joi.object().keys({\n    \n    email:Joi.string().email().required(),\n    first_name:Joi.string().alphanum().required(),\n    last_name: Joi.string().alphanum().required(),\n    address :Joi.string().alphanum().required(),\n    is_admin : Joi.boolean().default(false),\n     password : Joi.string().alphanum().required()\n    \n    });     \n   Joi.validate(data, schema, (err, value) => {\n if (err) {\n             console.log(schema.email);\n            // send a 422 error response if validation fails\n            res.status(422).json({\n                status: 'error',\n                message: 'Invalid Login Data(x)',\n              \n            });\n            \n            }   \n            else {\n                console.log('yyyyyyyyyyyyyyyyyyyyyyyyyyy');\n\n         next();\n\n\n            }\n});\n    \n  };\n "]}