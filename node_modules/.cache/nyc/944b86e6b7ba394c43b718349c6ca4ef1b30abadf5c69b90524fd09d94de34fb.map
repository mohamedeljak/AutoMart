{"version":3,"sources":["authenticonAdmin.js"],"names":["key","require","app","use","express","json","module","exports","req","res","next","token","headers","reflection","userx","reflections","find","reflect","jwt","verify","tokenkey","err","decoded","status","message","data","reflectionuser","id","console","log","is_admin","send"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AACA;AAGA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAMC,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR,E,CAIA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAGjC;AACA,MAAIC,KAAK,GAAGH,GAAG,CAACI,OAAJ,CAAY,cAAZ,CAAZ;;AACA,MAAMC,UAAU,GAAGC,kBAAMC,WAAN,CAAkBC,IAAlB,CAAuB,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACN,KAAR,KAAkBA,KAAtB;AAAA,GAA9B,CAAnB,CALiC,CAOjC;AACA;;;AACA,MAAIA,KAAJ,EAAW;AACV;AACC;AACAO,6BAAIC,MAAJ,CAAWR,KAAX,EAAkBX,GAAG,CAACoB,QAAtB,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAiB;AAClD;AACE,UAAID,GAAJ,EAAS;AACR;AACC,eAAOZ,GAAG,CAACJ,IAAJ,CAAS;AACfkB,UAAAA,MAAM,EAAE,GADO;AAEnBC,UAAAA,OAAO,EAAE,eAFU;AAGnBC,UAAAA,IAAI,EAAE;AAEFD,YAAAA,OAAO,EAAE;AAFP;AAHa,SAAT,CAAP;AAMD,OARD,MAQO;AACN,YAAGX,UAAH,EAAe;AACd,cAAMa,cAAc,GAAGZ,kBAAMC,WAAN,CAAkBC,IAAlB,CAAuB,UAAAC,OAAO;AAAA,mBAAIA,OAAO,CAACU,EAAR,KAAed,UAAU,CAACc,EAA9B;AAAA,WAA9B,CAAvB;;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAeH,cAAc,CAACI,QAA1C;;AACD,cAAGJ,cAAc,CAACI,QAAf,KAA4B,IAA/B,EAAoC;AACpC;AACA;AACAtB,YAAAA,GAAG,CAACc,OAAJ,GAAcA,OAAd;AACAZ,YAAAA,IAAI;AACL,WALC,MAMG;AACH,mBAAOD,GAAG,CAACJ,IAAJ,CAAS;AACfkB,cAAAA,MAAM,EAAE,GADO;AAElBC,cAAAA,OAAO,EAAE,oBAFS;AAGlBC,cAAAA,IAAI,EAAE;AAEFD,gBAAAA,OAAO,EAAE;AAFP;AAHY,aAAT,CAAP;AAQD;AACF,SAnBE,MAoBC;AAEH,iBAAOf,GAAG,CAACJ,IAAJ,CAAS;AACZkB,YAAAA,MAAM,EAAE,GADI;AAEfC,YAAAA,OAAO,EAAE,gBAFM;AAGfC,YAAAA,IAAI,EAAE;AAEFD,cAAAA,OAAO,EAAE;AAFP;AAHS,WAAT,CAAP;AAOD;AAEG;AACF,KA3CD;AA6CD,GAhDD,MAgDO;AAEL;AAEAf,IAAAA,GAAG,CAACsB,IAAJ,CAAS;AACRR,MAAAA,MAAM,EAAE,GADA;AAERC,MAAAA,OAAO,EAAE,oBAFD;AAGRC,MAAAA,IAAI,EAAE;AAEHD,QAAAA,OAAO,EAAE;AAFN;AAHE,KAAT;AAQD;AACF,CAtEH","sourceRoot":"/home/mhashim/Desktop/NewWork/AutoMart/src/middlewares","sourcesContent":["import express from 'express';\nimport Reflection from '../controllers/Reflection';\nimport user from '../controllers/user';\nimport jwt from 'jsonwebtoken';\nimport userx from '../models/user';\n//import tokenkey from './key';\n\n\nconst key = require('./key');\n\nconst app = express()\napp.use(express.json())\n\n\n\n//app.use('/api/v1/car', ProtectedRoutes);\nmodule.exports = (req, res, next) => {\n\n\n    // check header for the token\n    var token = req.headers['access-token'];\n    const reflection = userx.reflections.find(reflect => reflect.token === token);\n\n    //console.log(\"is_admin===\"+reflection.id);\n    // decode token\n    if (token) {\n     //console.log(key.tokenkey)\n      // verifies secret and checks if the token is expired\n      jwt.verify(token, key.tokenkey , (err, decoded) =>{  \n      //console.log('-----------------------',err)\n        if (err) {\n        \t//console.log(token);\n          return res.json({ \n           status :400,\n      \tmessage :\"invalid token\",\n      \tdata: {  \n\n          \tmessage: 'invalid token' } });    \n        } else {\n         if(reflection) {\n          const reflectionuser = userx.reflections.find(reflect => reflect.id === reflection.id);\n           console.log(\"iffffffff== \"+reflectionuser.is_admin);\n          if(reflectionuser.is_admin === true){\n          //  console.log(\"is_admin===\"+reflection);\n          // if everything is good, save to request for use in other routes\n          req.decoded = decoded;    \n          next();\n        }\n        else {\n          return res.json({ \n           status :400,\n        message :\"your are not admin\",\n        data: {  \n\n            message: ' your are not admin' } });\n\n\n        }\n      }\n     else {\n\n       return res.json({ \n           status :400,\n        message :\"User not Found\",\n        data: {  \n\n            message: ' User not Found' } });\n\n     }\n\n        }\n      });\n\n    } else {\n\n      // if there is no token  \n\n      res.send({ \n      \tstatus :401,\n      \tmessage :\"token not provided\",\n      \tdata: {  \n\n          message: 'No token provided.'} \n      });\n\n    }\n  };\n "]}